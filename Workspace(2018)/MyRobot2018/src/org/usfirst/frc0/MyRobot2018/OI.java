// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.MyRobot2018;

import org.usfirst.frc0.MyRobot2018.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc0.MyRobot2018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton powerCubeLift_Up1;
    public JoystickButton powerCubeLift_Stop1;
    public JoystickButton powerCubeLift_Down3;
    public JoystickButton powerCubeLift_Stop3;
    public JoystickButton powerCubeLift_Scale6;
    public JoystickButton powerCubeLift_Switch7;
    public JoystickButton powerCubeLift_Bottom8;
    public JoystickButton climbingLift_Down9;
    public JoystickButton climbingLift_Stop9;
    public JoystickButton climbingLift_Up10;
    public JoystickButton climbingLift_Stop10;
    public JoystickButton climbingLift_Hold_1;
    public JoystickButton climbingLift_Hold_2;
    public JoystickButton climbingLift_Hold_3;
    public JoystickButton powerCubeIntake_In14;
    public JoystickButton powerCubeIntake_Stop14;
    public JoystickButton powerCubeIntake_Out15;
    public JoystickButton powerCubeIntake_Stop15;
    public Joystick joystick1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);
        
        powerCubeIntake_Stop15 = new JoystickButton(joystick1, 15);
        powerCubeIntake_Stop15.whenReleased(new PowerCubeIntake_Off());
        powerCubeIntake_Out15 = new JoystickButton(joystick1, 15);
        powerCubeIntake_Out15.whileHeld(new PowerCubeIntake_Out());
        powerCubeIntake_Stop14 = new JoystickButton(joystick1, 14);
        powerCubeIntake_Stop14.whenReleased(new PowerCubeIntake_Off());
        powerCubeIntake_In14 = new JoystickButton(joystick1, 14);
        powerCubeIntake_In14.whileHeld(new PowerCubeIntake_In());
        climbingLift_Hold_3 = new JoystickButton(joystick1, 1);
        climbingLift_Hold_3.whenPressed(new ClimbingLift_Hold3());
        climbingLift_Hold_2 = new JoystickButton(joystick1, 12);
        climbingLift_Hold_2.whenPressed(new ClimbingLift_Hold2());
        climbingLift_Hold_1 = new JoystickButton(joystick1, 11);
        climbingLift_Hold_1.whenPressed(new ClimbingLift_Hold1());
        climbingLift_Stop10 = new JoystickButton(joystick1, 10);
        climbingLift_Stop10.whenReleased(new ClimbingLift_Stop());
        climbingLift_Up10 = new JoystickButton(joystick1, 1);
        climbingLift_Up10.whileHeld(new CimbingLift_Up());
        climbingLift_Stop9 = new JoystickButton(joystick1, 9);
        climbingLift_Stop9.whenReleased(new ClimbingLift_Stop());
        climbingLift_Down9 = new JoystickButton(joystick1, 9);
        climbingLift_Down9.whileHeld(new ClimbingLift_Down());
        powerCubeLift_Bottom8 = new JoystickButton(joystick1, 8);
        powerCubeLift_Bottom8.whenPressed(new PowerCubeLift_Bottom());
        powerCubeLift_Switch7 = new JoystickButton(joystick1, 7);
        powerCubeLift_Switch7.whenPressed(new PowerCubeLift_Switch());
        powerCubeLift_Scale6 = new JoystickButton(joystick1, 6);
        powerCubeLift_Scale6.whenPressed(new PowerCubeLift_Scale());
        powerCubeLift_Stop3 = new JoystickButton(joystick1, 3);
        powerCubeLift_Stop3.whenReleased(new PowerCubeLift_Stop());
        powerCubeLift_Down3 = new JoystickButton(joystick1, 3);
        powerCubeLift_Down3.whileHeld(new PowerCubeLift_Down());
        powerCubeLift_Stop1 = new JoystickButton(joystick1, 5);
        powerCubeLift_Stop1.whenReleased(new PowerCubeLift_Stop());
        powerCubeLift_Up1 = new JoystickButton(joystick1, 5);
        powerCubeLift_Up1.whileHeld(new PowerCubeLift_Up());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("CustomDrive", new CustomDrive(joystick1));
        SmartDashboard.putData("PowerCubeLift_Scale", new PowerCubeLift_Scale());
        SmartDashboard.putData("PowerCubeLift_Switch", new PowerCubeLift_Switch());
        SmartDashboard.putData("PowerCubeLift_Bottom", new PowerCubeLift_Bottom());
        SmartDashboard.putData("PowerCubeLift_Up", new PowerCubeLift_Up());
        SmartDashboard.putData("PowerCubeLift_Down", new PowerCubeLift_Down());
        SmartDashboard.putData("PowerCubeLift_Stop", new PowerCubeLift_Stop());
        SmartDashboard.putData("CimbingLift_Up", new CimbingLift_Up());
        SmartDashboard.putData("ClimbingLift_Down", new ClimbingLift_Down());
        SmartDashboard.putData("ClimbingLift_Stop", new ClimbingLift_Stop());
        SmartDashboard.putData("ClimbingLift_Hold1", new ClimbingLift_Hold1());
        SmartDashboard.putData("ClimbingLift_Hold2", new ClimbingLift_Hold2());
        SmartDashboard.putData("ClimbingLift_Hold3", new ClimbingLift_Hold3());
        SmartDashboard.putData("PowerCubeIntake_In", new PowerCubeIntake_In());
        SmartDashboard.putData("PowerCubeIntake_Out", new PowerCubeIntake_Out());
        SmartDashboard.putData("PowerCubeIntake_Off", new PowerCubeIntake_Off());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

