// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.MyRobot2018.subsystems;

import org.usfirst.frc0.MyRobot2018.RobotMap;

import org.usfirst.frc0.MyRobot2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro analogGyro1 = RobotMap.driveAnalogGyro1;
    private final SpeedController speedController1 = RobotMap.driveSpeedController1;
    private final SpeedController speedController2 = RobotMap.driveSpeedController2;
    private final DifferentialDrive differentialDrive1 = RobotMap.driveDifferentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new CustomDrive());
    }
    
    public void customDrive(Joystick joystick1) {
    	differentialDrive1.arcadeDrive(joystick1.getY(), joystick1.getX());
    	
    	if(joystick1.getX() > joystick1.getZ() || joystick1.getX() < joystick1.getZ())
    	{
    		differentialDrive1.arcadeDrive(joystick1.getY(), joystick1.getX());
    	}
    	else if(joystick1.getZ() > joystick1.getX()|| joystick1.getX() > joystick1.getZ())
    	{
    		differentialDrive1.arcadeDrive(joystick1.getY(), joystick1.getZ());
    	}
    }
    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

